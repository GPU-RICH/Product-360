import streamlit as st
from typing import List, Dict, Any, Optional
import asyncio
from PIL import Image
import io
from back import (ChatConfig, ChatLogger, ChatMemory, QuestionGenerator, 
                  GeminiRAG, ProductDatabase, UserManager, UserInfo)

# Product Configuration
PRODUCT_CONFIG = {
    "GAPL STARTER 1KG": {
        "markdown_file": "STARTER.md",
        "title": "ЁЯМ▒ GAPL STARTER 1KG рдЙрддреНрдкрд╛рдж рд╕рд╣рд╛рдпрдХ",
        "video_url": "https://www.youtube.com/embed/9kHyeQ9B7TQ",
        "suggestions": [
            {"image": "INNO_AG.webp", "name": "INNO AG Stimgo MGR 1 Kg"},
            {"image": "IFFCO.webp", "name": "IFFCO Sagarika Bucket 10 Kg"},
            {"image": "ORGA.webp", "name": "ORGANIC PDM 50 Kg"}
        ]
    },
    "ENTOKILL 250ML": {
        "markdown_file": "ENTOKILL.md",
        "title": "ЁЯМ▒ Entokill 250ml рдЙрддреНрдкрд╛рдж рд╕рд╣рд╛рдпрдХ",
        "video_url": "https://www.youtube.com/embed/EY489XtDYEo",
        "suggestions": [
            {"image": "paras-npk.webp", "name": "PARAS NPK 12:32:16 50 Kg"},
            {"image": "mosaic.webp", "name": "MOSAIC MOP 50 Kg"},
            {"image": "paras_dap.webp", "name": "PARAS DAP 50 Kg"}
        ]
    },
    "DEHAAT KHURAK 3000": {
        "markdown_file": "KHURAK.md",
        "title": "ЁЯМ▒ DeHaat Khurak 3000 рдЙрддреНрдкрд╛рдж рд╕рд╣рд╛рдпрдХ",
        "video_url": "https://www.youtube.com/embed/Q55lYWMu40o",
        "suggestions": [
            {"image": "doodh_plus.webp", "name": "Doodh Plus 5 Kg"},
            {"image": "balance.webp", "name": "DEHAAT BALANCE DIET 25 KG"},
            {"image": "vetnoliv.webp", "name": "Vetnoliv 1 L"}
        ]
    },
    "DOODH PLUS": {
        "markdown_file": "doodhplus.md",
        "title": "ЁЯМ▒ Doodh Plus рдЙрддреНрдкрд╛рдж рд╕рд╣рд╛рдпрдХ",
        "video_url": "https://www.youtube.com/embed/3_Geihsy1KM",
        "suggestions": [
            {"image": "doodh_khurak.webp", "name": "DeHaat Khurak 5000 45 Kg"},
            {"image": "vetnocal.webp", "name": "Vetnocal Gold 5 L"},
            {"image": "kriya.webp", "name": "KriyaPro"}
        ]
    }
}

# UI Text in Hindi
UI_TEXT = {
    "welcome_message": """
    Product 360 рдЕрдиреБрднрд╡ рдореЗрдВ рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ! ЁЯМ╛
    рдирдорд╕реНрддреЗ! рдЕрдм рдЖрдк рдЙрди 10,000+ рдХрд┐рд╕рд╛рдиреЛрдВ рдХреЗ рдкрд░рд┐рд╡рд╛рд░ рдХрд╛ рд╣рд┐рд╕реНрд╕рд╛ рдмрди рдЧрдП рд╣реИрдВ рдЬреЛ рдЗрд╕ рдЙрддреНрдкрд╛рдж рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рддреЗ рд╣реИрдВред
    рдЖрдкрдиреЗ {product} рдХрд╛ QR рдХреЛрдб рд╕реНрдХреИрди рдХрд┐рдпрд╛ рд╣реИтАФрдпрд╣рд╛рдВ рдЖрдкрдХреЛ рдЗрд╕ рдЙрддреНрдкрд╛рдж рд╕реЗ рдЬреБрдбрд╝реА рд╕рднреА рдЬрд╝рд░реВрд░реА рдЬрд╛рдирдХрд╛рд░реА рдорд┐рд▓реЗрдЧреА, рд╕рд╛рде рд╣реА рдЙрди рдХрд┐рд╕рд╛рдиреЛрдВ рдХреА рдХрд╣рд╛рдирд┐рдпрд╛рдБ рднреА, рдЬрд┐рдиреНрд╣реЛрдВрдиреЗ рдЗрд╕ рдЙрддреНрдкрд╛рдж рд╕реЗ рдмреЗрд╣рддрд░реАрди рдкрд░рд┐рдгрд╛рдо рд╣рд╛рд╕рд┐рд▓ рдХрд┐рдП рд╣реИрдВред
    
    рдиреАрдЪреЗ рджрд┐рдП рдЧрдП рд╕рд╡рд╛рд▓реЛрдВ рдореЗрдВ рд╕реЗ рдХреЛрдИ рдЪреБрдиреЗрдВ рдпрд╛ рдЕрдкрдирд╛ рдЦреБрдж рдХрд╛ рд╕рд╡рд╛рд▓ рдкреВрдЫреЗрдВ
    """,
    "product_select": "рдЙрддреНрдкрд╛рдж рдЪреБрдиреЗрдВ:",
    "input_placeholder": "рдЕрдкрдирд╛ рдкреНрд░рд╢реНрди рдпрд╣рд╛рдВ рдЯрд╛рдЗрдк рдХрд░реЗрдВ...",
    "input_label": "рдХреБрдЫ рднреА рдкреВрдЫреЗрдВ:",
    "clear_chat": "рдЪреИрдЯ рд╕рд╛рдлрд╝ рдХрд░реЗрдВ",
    "sidebar_title": "рдЕрдкрдиреА рдЬрд╛рдирдХрд╛рд░реА рднрд░реЗрдВ рдФрд░ рдЕрдЧрд▓реА рдЦрд░реАрджрд╛рд░реА рдкрд░ 15% рдХреА рдЫреВрдЯ рдкрд╛рдПрдВ !!",
    "form_name": "рдЖрдкрдХрд╛ рдирд╛рдо",
    "form_mobile": "рдореЛрдмрд╛рдЗрд▓ рдирдВрдмрд░",
    "form_location": "рд╕реНрдерд╛рди",
    "form_purchase": "рдХреНрдпрд╛ рдЖрдкрдиреЗ рдЙрддреНрдкрд╛рдж рдЦрд░реАрджрд╛ рд╣реИ?",
    "form_crop": "рдпрджрд┐ рд╣рд╛рдБ, рддреЛ рдЗрд╕ рдЙрддреНрдкрд╛рдж рд╕реЗ рдЖрдкрдХреЛ рдХреНрдпрд╛ рд▓рд╛рдн рд╣реБрдЖ рд╣реИ?",
    "form_submit": "рдЬрд╛рдирдХрд╛рд░реА рд╕рд╣реЗрдЬреЗрдВ",
    "form_success": "тЬЕ рдЬрд╛рдирдХрд╛рд░реА рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рд╕рд╣реЗрдЬреА рдЧрдИ!",
    "form_error": "тЭМ рдЬрд╛рдирдХрд╛рд░реА рд╕рд╣реЗрдЬрдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐ред рдХреГрдкрдпрд╛ рдкреБрдирдГ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред",
    "form_required": "рдХреГрдкрдпрд╛ рд╕рднреА рдЖрд╡рд╢реНрдпрдХ рдлрд╝реАрд▓реНрдб рднрд░реЗрдВред",
    "image_upload": "рдпрджрд┐ рдЖрдкрдХреЗ рдкрд╛рд╕ рдЕрдкрдиреА рдлрд╕рд▓ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдХреЛрдИ рдЪрд┐рдВрддрд╛ рдпрд╛ рдкреНрд░рд╢реНрди рд╣реИ, рддреЛ рдЙрд╕рдХреА рдЫрд╡рд┐ рдЕрдкрд▓реЛрдб рдХрд░реЗрдВред",
    "image_helper": "рдпрджрд┐ рдЖрдкрдХреЗ рдкрд╛рд╕ рдЕрдкрдиреА рдлрд╕рд▓ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдХреЛрдИ рдЪрд┐рдВрддрд╛ рдпрд╛ рдкреНрд░рд╢реНрди рд╣реИ, рддреЛ рдЙрд╕рдХреА рдЫрд╡рд┐ рдЕрдкрд▓реЛрдб рдХрд░реЗрдВред",
    "image_processing": "рдЖрдкрдХреА рдЫрд╡рд┐ рдкреНрд░реНрд░реЛрд╕реЗрд╕ рдХреА рдЬрд╛ рд░рд╣реА рд╣реИ...",
    "show_suggestions": "рд╕рдВрдмрдВрдзрд┐рдд рдЙрддреНрдкрд╛рдж рджрд┐рдЦрд╛рдПрдВ",
    "suggestions_title": "рд╕рдВрдмрдВрдзрд┐рдд рдЙрддреНрдкрд╛рдж:",
    "initial_questions": [
        "рдЙрддреНрдкрд╛рдж рдХреЗ рдореБрдЦреНрдп рд▓рд╛рдн рдХреНрдпрд╛ рд╣реИрдВ?",
        "рдЙрддреНрдкрд╛рдж рдХрд╛ рдкреНрд░рдпреЛрдЧ рдХреИрд╕реЗ рдХрд░реЗрдВ?",
        "рдЙрддреНрдкрд╛рдж рдХрд┐рди рдлрд╕рд▓реЛрдВ рдХреЗ рд▓рд┐рдП рдЙрдкрдпреБрдХреНрдд рд╣реИ?",
        "рдЕрдиреБрд╢рдВрд╕рд┐рдд рдорд╛рддреНрд░рд╛ рдХреНрдпрд╛ рд╣реИ?"
    ]
}

UI_TEXT.update({
    "video_title": "рдЙрддреНрдкрд╛рдж рдбреЗрдореЛ рд╡реАрдбрд┐рдпреЛ",
    "video_loading": "рд╡реАрдбрд┐рдпреЛ рд▓реЛрдб рд╣реЛ рд░рд╣рд╛ рд╣реИ...",
    "video_error": "рд╡реАрдбрд┐рдпреЛ рд▓реЛрдб рдХрд░рдиреЗ рдореЗрдВ рд╕рдорд╕реНрдпрд╛ рд╣реБрдИред рдХреГрдкрдпрд╛ рдкреБрдирдГ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред"
})

# Initialize session state
def init_session_state():
    """Initialize all session state variables"""
    defaults = {
        'initialized': False,
        'chat_memory': ChatMemory(),
        'messages': [],
        'message_counter': 0,
        'processed_questions': set(),
        'need_rerun': False,
        'user_info': None,
        'show_suggestions': False,
        'selected_product': list(PRODUCT_CONFIG.keys())[0]
    }
    
    for key, value in defaults.items():
        if key not in st.session_state:
            st.session_state[key] = value
      
# Configure the page
st.set_page_config(
    page_title="Product Assistant",
    page_icon="ЁЯМ▒",
    layout="wide"
)

# Custom CSS
st.markdown("""
<style>
.user-message {
    background-color: #98BF64;
    color: black;
    padding: 15px;
    border-radius: 15px;
    margin: 10px 0;
}
.assistant-message {
    background-color: #363E35;
    color: #98FB98;
    padding: 15px;
    border-radius: 15px;
    margin: 10px 0;
}
.stButton > button {
    background-color: #212B2A;
    color: white;
    border: none;
    padding: 10px 15px;
    border-radius: 5px;
    transition: background-color 0.3s;
}
.stButton > button:hover {
    background-color: #45a049;
}
.image-upload {
    margin: 20px 0;
    padding: 15px;
    border-radius: 10px;
    border: 2px dashed #72BF6A;
}
.product-card {
    border: 1px solid #ddd;
    border-radius: 10px;
    padding: 15px;
    margin: 10px;
    background-color: white;
    text-align: center;
}
.related-products {
    padding: 20px;
    margin: 20px 0;
    background-color: #f5f5f5;
    border-radius: 10px;
}
.video-container {
    position: relative;
    padding-bottom: 56.25%;
    margin: 20px 0;
    border-radius: 10px;
    overflow: hidden;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}
.video-container iframe {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    border: none;
}
</style>
""", unsafe_allow_html=True)

def display_product_suggestions():
    if st.session_state.show_suggestions:
        st.sidebar.markdown("---")
        st.sidebar.markdown(f"### {UI_TEXT['suggestions_title']}")
        
        product_config = PRODUCT_CONFIG[st.session_state.selected_product]
        for suggestion in product_config['suggestions']:
            with st.sidebar.container():
                st.image(suggestion['image'], caption=suggestion['name'], use_column_width=True)
                st.markdown(f"**{suggestion['name']}**")
                st.markdown("---")
                    
# Initialize components
@st.cache_resource
def initialize_components():
    """Initialize and cache application components"""
    try:
        config = ChatConfig()
        logger = ChatLogger(config.log_file)
        question_gen = QuestionGenerator(config.gemini_api_key)
        rag = GeminiRAG(config.gemini_api_key)
        user_manager = UserManager(config.user_data_file)
        return config, logger, question_gen, rag, user_manager
    except Exception as e:
        st.error(f"Error initializing components: {str(e)}")
        raise e

def load_initial_database():
    """Load the default product database"""
    if not st.session_state.initialized:
        try:
            config, logger, question_gen, rag, user_manager = initialize_components()
            default_product = list(PRODUCT_CONFIG.keys())[0]
            markdown_file = PRODUCT_CONFIG[default_product]['markdown_file']
            
            db = ProductDatabase(config)
            with open(markdown_file, "r", encoding="utf-8") as f:
                markdown_content = f.read()
            db.process_markdown(markdown_content)
            
            st.session_state.db = db
            st.session_state.config = config
            st.session_state.logger = logger
            st.session_state.question_gen = question_gen
            st.session_state.rag = rag
            st.session_state.user_manager = user_manager
            st.session_state.initialized = True
            
        except Exception as e:
            st.error(f"Error loading initial database: {str(e)}")
            return None
def load_new_database(product_name: str):
    """Load a new product database when product selection changes"""
    try:
        markdown_file = PRODUCT_CONFIG[product_name]['markdown_file']
        db = ProductDatabase(st.session_state.config)
        with open(markdown_file, "r", encoding="utf-8") as f:
            markdown_content = f.read()
        db.process_markdown(markdown_content)
        st.session_state.db = db
    except Exception as e:
        st.error(f"рдбреЗрдЯрд╛рдмреЗрд╕ рд▓реЛрдб рдХрд░рдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐: {str(e)}")

def on_product_change():
    """Handle product selection change"""
    load_new_database(st.session_state.selected_product)
    st.session_state.messages = []
    st.session_state.chat_memory.clear_history()
    st.session_state.message_counter = 0

async def process_question(question: str, image: Optional[bytes] = None):
    """Process a question and update the chat state"""
    try:
        # If image is provided, use image processing
        if image:
            answer = await st.session_state.rag.get_answer(
                question=question,
                context="",  # No context needed for image analysis
                user_info=st.session_state.user_info,
                image=image
            )
        else:
            # Normal text-based processing
            relevant_docs = st.session_state.db.search(question)
            context = st.session_state.rag.create_context(relevant_docs)
            answer = await st.session_state.rag.get_answer(
                question=question,
                context=context,
                user_info=st.session_state.user_info,
                image=None
            )
        
        follow_up_questions = await st.session_state.question_gen.generate_questions(
            question, 
            answer,
            st.session_state.user_info
        )
        
        st.session_state.chat_memory.add_interaction(question, answer)
        st.session_state.logger.log_interaction(
            question, 
            answer,
            st.session_state.user_info
        )
        
        st.session_state.message_counter += 1
        
        # Create message content
        message_content = {
            "text": question,
            "has_image": image is not None
        }
        
        st.session_state.messages.append({
            "role": "user",
            "content": message_content,
            "message_id": st.session_state.message_counter
        })
        
        st.session_state.messages.append({
            "role": "assistant",
            "content": answer,
            "questions": follow_up_questions,
            "message_id": st.session_state.message_counter
        })
        
    except Exception as e:
        st.error(f"Error processing question: {str(e)}")

def render_user_form():
    """Render the user information form in the sidebar"""
    st.sidebar.title(UI_TEXT["sidebar_title"])
    
    with st.sidebar.form("user_info_form"):
        name = st.text_input(UI_TEXT["form_name"])
        mobile = st.text_input(UI_TEXT["form_mobile"])
        location = st.text_input(UI_TEXT["form_location"])
        has_purchased = st.checkbox(UI_TEXT["form_purchase"])
        crop_type = st.text_input(UI_TEXT["form_crop"])
        
        submitted = st.form_submit_button(UI_TEXT["form_submit"])
        
        if submitted:
            if name and mobile and location and crop_type:
                user_info = UserInfo(
                    name=name,
                    mobile=mobile,
                    location=location,
                    has_purchased=has_purchased,
                    crop_type=crop_type
                )
                
                if user_manager.save_user_info(user_info):
                    st.session_state.user_info = user_info
                    st.sidebar.success(UI_TEXT["form_success"])
                else:
                    st.sidebar.error(UI_TEXT["form_error"])
            else:
                st.sidebar.warning(UI_TEXT["form_required"])

def main():
    # Initialize session state
    init_session_state()
    
    # Load initial database and components if not already initialized
    if not st.session_state.initialized:
        load_initial_database()
    
    # Product selection in sidebar
    st.sidebar.selectbox(
        UI_TEXT["product_select"],
        options=list(PRODUCT_CONFIG.keys()),
        key="selected_product",
        on_change=on_product_change
    )
    
    # Add suggestions toggle at the top of sidebar
    st.sidebar.checkbox(
        UI_TEXT["show_suggestions"],
        key="show_suggestions",
        value=st.session_state.show_suggestions
    )

    # Render user form in sidebar
    render_user_form()
    
    # Display product suggestions in sidebar if enabled
    if st.session_state.show_suggestions:
        display_product_suggestions()

    # Display product-specific title
    product_config = PRODUCT_CONFIG[st.session_state.selected_product]
    st.title(product_config['title'])

    # Add video section after title
    # Add video section after title
    if "video_url" in product_config:
        st.subheader(UI_TEXT["video_title"])
        with st.container():
            video_html = f"""
                <div class='video-container'>
                    <iframe
                        src='{product_config['video_url']}'
                        frameborder='0'
                        allow='accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture'
                        allowfullscreen>
                    </iframe>
                </div>
                """
            st.markdown(video_html, unsafe_allow_html=True)
            
    # Welcome message
    if not st.session_state.messages:
        st.markdown(UI_TEXT["welcome_message"].format(product=st.session_state.selected_product))
        
        # Display initial questions as buttons
        cols = st.columns(2)
        for i, question in enumerate(UI_TEXT["initial_questions"]):
            if cols[i % 2].button(question, key=f"initial_{i}", use_container_width=True):
                asyncio.run(process_question(question))
    
    # Display chat history
    for message in st.session_state.messages:
        if message["role"] == "user":
            if isinstance(message["content"], dict):
                st.markdown(
                    f'<div class="user-message">ЁЯСд {message["content"]["text"]}</div>',
                    unsafe_allow_html=True
                )
                if message["content"]["has_image"]:
                    st.markdown(
                        '<div class="user-message">ЁЯУ╖ рдЫрд╡рд┐ рдЕрдкрд▓реЛрдб рдХреА рдЧрдИ</div>',
                        unsafe_allow_html=True
                    )
            else:
                st.markdown(
                    f'<div class="user-message">ЁЯСд {message["content"]}</div>',
                    unsafe_allow_html=True
                )
        else:
            st.markdown(
                f'<div class="assistant-message">ЁЯМ▒ {message["content"]}</div>',
                unsafe_allow_html=True
            )
            
            if message.get("questions"):
                cols = st.columns(2)
                for i, question in enumerate(message["questions"]):
                    if cols[i % 2].button(
                        question,
                        key=f"followup_{message['message_id']}_{i}",
                        use_container_width=True
                    ):
                        asyncio.run(process_question(question))
    
    # Input area with image upload and form
    with st.container():
        # Add image upload
        uploaded_file = st.file_uploader(
            UI_TEXT["image_upload"],
            type=['png', 'jpg', 'jpeg'],
            help=UI_TEXT["image_helper"],
            key="image_upload"
        )
        
        if uploaded_file:
            try:
                image = Image.open(uploaded_file)
                st.image(image, caption="рдЕрдкрд▓реЛрдб рдХреА рдЧрдИ рдЫрд╡рд┐", use_column_width=True)
            except Exception as e:
                st.error("рдЫрд╡рд┐ рд▓реЛрдб рдХрд░рдиреЗ рдореЗрдВ рд╕рдорд╕реНрдпрд╛ рд╣реБрдИред рдХреГрдкрдпрд╛ рджреВрд╕рд░реА рдЫрд╡рд┐ рдЖрдЬрд╝рдорд╛рдПрдВред")
        
        # Create a form for input
        with st.form(key='input_form'):
            question = st.text_input(
                UI_TEXT["input_label"],
                key="user_input",
                placeholder=UI_TEXT["input_placeholder"]
            )
            submit = st.form_submit_button("рднреЗрдЬреЗрдВ")
        
        # Process input when submitted
        if submit and question:
            image_bytes = None
            if uploaded_file:
                try:
                    image_bytes = uploaded_file.getvalue()
                except Exception as e:
                    st.error("рдЫрд╡рд┐ рдкреНрд░реЛрд╕реЗрд╕ рдХрд░рдиреЗ рдореЗрдВ рд╕рдорд╕реНрдпрд╛ рд╣реБрдИред")
            
            with st.spinner("рдкреНрд░реЛрд╕реЗрд╕ рдХрд░ рд░рд╣реЗ рд╣реИрдВ..."):
                asyncio.run(process_question(question, image_bytes))
                # Store the processed question in session state
                if 'processed_questions' not in st.session_state:
                    st.session_state.processed_questions = set()
                st.session_state.processed_questions.add(question)
            
            # Clear the form using a rerun flag
            if 'need_rerun' not in st.session_state:
                st.session_state.need_rerun = True
                st.rerun()
        
        # Handle rerun cleanup
        if 'need_rerun' in st.session_state and st.session_state.need_rerun:
            st.session_state.need_rerun = False
            st.session_state.user_input = ""
            if 'image_upload' in st.session_state:
                st.session_state.image_upload = None
        
        # Clear chat controls
        cols = st.columns([4, 1])
        if cols[1].button(UI_TEXT["clear_chat"], use_container_width=True):
            st.session_state.messages = []
            st.session_state.chat_memory.clear_history()
            st.session_state.message_counter = 0
            st.session_state.image_upload = None
            if 'processed_questions' in st.session_state:
                st.session_state.processed_questions = set()
            st.session_state.user_input = ""
            st.rerun()

def handle_submit():
    """Handle the submission of user input"""
    if st.session_state.user_input:
        st.session_state.submitted_question = st.session_state.user_input
        st.session_state.user_input = ""

def handle_error(error: Exception):
    """Handle errors gracefully"""
    error_messages = {
        "generic": "рдПрдХ рддреНрд░реБрдЯрд┐ рд╣реБрдИред рдХреГрдкрдпрд╛ рдкреБрдирдГ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред",
        "image": "рдЫрд╡рд┐ рдкреНрд░реЛрд╕реЗрд╕рд┐рдВрдЧ рдореЗрдВ рддреНрд░реБрдЯрд┐ред рдХреГрдкрдпрд╛ рдХреЛрдИ рдЕрдиреНрдп рдЫрд╡рд┐ рдЖрдЬрд╝рдорд╛рдПрдВ рдпрд╛ рдмрд┐рдирд╛ рдЫрд╡рд┐ рдХреЗ рдкреВрдЫреЗрдВред",
        "network": "рдиреЗрдЯрд╡рд░реНрдХ рддреНрд░реБрдЯрд┐ред рдХреГрдкрдпрд╛ рдЕрдкрдирд╛ рдХрдиреЗрдХреНрд╢рди рдЬрд╛рдВрдЪреЗрдВ рдФрд░ рдкреБрдирдГ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред",
        "database": "рдбреЗрдЯрд╛рдмреЗрд╕ рд▓реЛрдб рдХрд░рдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐ред рдХреГрдкрдпрд╛ рдкреЗрдЬ рдХреЛ рд░рд┐рдлреНрд░реЗрд╢ рдХрд░реЗрдВред"
    }
    
    if "image" in str(error).lower():
        error_message = error_messages["image"]
    elif "network" in str(error).lower():
        error_message = error_messages["network"]
    elif "database" in str(error).lower():
        error_message = error_messages["database"]
    else:
        error_message = error_messages["generic"]
    
    st.error(error_message)
    logging.error(f"Error in app: {str(error)}")

if __name__ == "__main__":
    main()
