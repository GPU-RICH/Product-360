import streamlit as st
from typing import List, Dict, Any, Optional
import asyncio
from PIL import Image
import io
from .core import (ChatConfig, ChatLogger, ChatMemory, QuestionGenerator, 
                  GeminiRAG, ProductDatabase, UserManager, UserInfo)

# UI Text in Hindi
UI_TEXT = {
    "title": "üå± Entokill 250ml ‡§â‡§§‡•ç‡§™‡§æ‡§¶ ‡§∏‡§π‡§æ‡§Ø‡§ï",
    "welcome_message": """
    Product 360 ‡§Ö‡§®‡•Å‡§≠‡§µ ‡§Æ‡•á‡§Ç ‡§Ü‡§™‡§ï‡§æ ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à! üåæ
    ‡§®‡§Æ‡§∏‡•ç‡§§‡•á! ‡§Ö‡§¨ ‡§Ü‡§™ ‡§â‡§® 10,000+ ‡§ï‡§ø‡§∏‡§æ‡§®‡•ã‡§Ç ‡§ï‡•á ‡§™‡§∞‡§ø‡§µ‡§æ‡§∞ ‡§ï‡§æ ‡§π‡§ø‡§∏‡•ç‡§∏‡§æ ‡§¨‡§® ‡§ó‡§è ‡§π‡•à‡§Ç ‡§ú‡•ã ‡§á‡§∏ ‡§â‡§§‡•ç‡§™‡§æ‡§¶ ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç‡•§
    ‡§Ü‡§™‡§®‡•á Entokill 250ml ‡§ï‡§æ QR ‡§ï‡•ã‡§° ‡§∏‡•ç‡§ï‡•à‡§® ‡§ï‡§ø‡§Ø‡§æ ‡§π‡•à‚Äî‡§Ø‡§π‡§æ‡§Ç ‡§Ü‡§™‡§ï‡•ã ‡§á‡§∏ ‡§â‡§§‡•ç‡§™‡§æ‡§¶ ‡§∏‡•á ‡§ú‡•Å‡§°‡§º‡•Ä ‡§∏‡§≠‡•Ä ‡§ú‡§º‡§∞‡•Ç‡§∞‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§Æ‡§ø‡§≤‡•á‡§ó‡•Ä, ‡§∏‡§æ‡§• ‡§π‡•Ä ‡§â‡§® ‡§ï‡§ø‡§∏‡§æ‡§®‡•ã‡§Ç ‡§ï‡•Ä ‡§ï‡§π‡§æ‡§®‡§ø‡§Ø‡§æ‡§Å ‡§≠‡•Ä, ‡§ú‡§ø‡§®‡•ç‡§π‡•ã‡§Ç‡§®‡•á ‡§á‡§∏ ‡§â‡§§‡•ç‡§™‡§æ‡§¶ ‡§∏‡•á ‡§¨‡•á‡§π‡§§‡§∞‡•Ä‡§® ‡§™‡§∞‡§ø‡§£‡§æ‡§Æ ‡§π‡§æ‡§∏‡§ø‡§≤ ‡§ï‡§ø‡§è ‡§π‡•à‡§Ç‡•§
    ‡§•‡•ã‡§°‡§º‡§æ ‡§∏‡§Æ‡§Ø ‡§®‡§ø‡§ï‡§æ‡§≤‡§ï‡§∞ ‡§Ö‡§™‡§®‡•á ‡§∏‡§æ‡§•‡•Ä ‡§ï‡§ø‡§∏‡§æ‡§®‡•ã‡§Ç ‡§ï‡•á (product name) ‡§∏‡•á ‡§ú‡•Å‡§°‡§º‡•á ‡§Ö‡§®‡•Å‡§≠‡§µ ‡§¶‡•á‡§ñ‡•á‡§Ç -> https://www.youtube.com/watch?v=EY489XtDYEo ‡§î‡§∞ Entokill 250ml ‡§ï‡§æ ‡§Ö‡§ß‡§ø‡§ï‡§§‡§Æ ‡§≤‡§æ‡§≠ ‡§â‡§†‡§æ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§§‡•à‡§Ø‡§æ‡§∞ ‡§π‡•ã ‡§ú‡§æ‡§è‡§Ç!
    
    ‡§®‡•Ä‡§ö‡•á ‡§¶‡§ø‡§è ‡§ó‡§è ‡§∏‡§µ‡§æ‡§≤‡•ã‡§Ç ‡§Æ‡•á‡§Ç ‡§∏‡•á ‡§ï‡•ã‡§à ‡§ö‡•Å‡§®‡•á‡§Ç ‡§Ø‡§æ ‡§Ö‡§™‡§®‡§æ ‡§ñ‡•Å‡§¶ ‡§ï‡§æ ‡§∏‡§µ‡§æ‡§≤ ‡§™‡•Ç‡§õ‡•á‡§Ç
    """,
    "input_placeholder": "‡§Ö‡§™‡§®‡§æ ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§Ø‡§π‡§æ‡§Ç ‡§ü‡§æ‡§á‡§™ ‡§ï‡§∞‡•á‡§Ç...",
    "input_label": "‡§ï‡•Å‡§õ ‡§≠‡•Ä ‡§™‡•Ç‡§õ‡•á‡§Ç:",
    "clear_chat": "‡§ö‡•à‡§ü ‡§∏‡§æ‡§´‡§º ‡§ï‡§∞‡•á‡§Ç",
    "sidebar_title": "‡§â‡§™‡§Ø‡•ã‡§ó‡§ï‡§∞‡•ç‡§§‡§æ ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä",
    "form_name": "‡§Ü‡§™‡§ï‡§æ ‡§®‡§æ‡§Æ",
    "form_mobile": "‡§Æ‡•ã‡§¨‡§æ‡§á‡§≤ ‡§®‡§Ç‡§¨‡§∞",
    "form_location": "‡§∏‡•ç‡§•‡§æ‡§®",
    "form_purchase": "‡§ï‡•ç‡§Ø‡§æ ‡§Ü‡§™‡§®‡•á ‡§â‡§§‡•ç‡§™‡§æ‡§¶ ‡§ñ‡§∞‡•Ä‡§¶‡§æ ‡§π‡•à?",
    "form_crop": "‡§Ü‡§™ ‡§ï‡•å‡§® ‡§∏‡•Ä ‡§´‡§∏‡§≤ ‡§â‡§ó‡§æ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç?",
    "form_submit": "‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§∏‡§π‡•á‡§ú‡•á‡§Ç",
    "form_success": "‚úÖ ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§∏‡§π‡•á‡§ú‡•Ä ‡§ó‡§à!",
    "form_error": "‚ùå ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§∏‡§π‡•á‡§ú‡§®‡•á ‡§Æ‡•á‡§Ç ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§™‡•Å‡§®‡§É ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç‡•§",
    "form_required": "‡§ï‡•É‡§™‡§Ø‡§æ ‡§∏‡§≠‡•Ä ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§´‡§º‡•Ä‡§≤‡•ç‡§° ‡§≠‡§∞‡•á‡§Ç‡•§",
    "image_upload": "‡§õ‡§µ‡§ø ‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç (‡§µ‡•à‡§ï‡§≤‡•ç‡§™‡§ø‡§ï)",
    "image_helper": "‡§Ø‡§¶‡§ø ‡§Ü‡§™‡§ï‡•á ‡§™‡§æ‡§∏ ‡§Ö‡§™‡§®‡•Ä ‡§´‡§∏‡§≤ ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§ï‡•ã‡§à ‡§ö‡§ø‡§Ç‡§§‡§æ ‡§Ø‡§æ ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§π‡•à, ‡§§‡•ã ‡§â‡§∏‡§ï‡•Ä ‡§õ‡§µ‡§ø ‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç‡•§",
    "image_processing": "‡§Ü‡§™‡§ï‡•Ä ‡§õ‡§µ‡§ø ‡§™‡•ç‡§∞‡•ç‡§∞‡•ã‡§∏‡•á‡§∏ ‡§ï‡•Ä ‡§ú‡§æ ‡§∞‡§π‡•Ä ‡§π‡•à...",
    "show_suggestions": "‡§∏‡§Ç‡§¨‡§Ç‡§ß‡§ø‡§§ ‡§â‡§§‡•ç‡§™‡§æ‡§¶ ‡§¶‡§ø‡§ñ‡§æ‡§è‡§Ç",
    "suggestions_title": "‡§∏‡§Ç‡§¨‡§Ç‡§ß‡§ø‡§§ ‡§â‡§§‡•ç‡§™‡§æ‡§¶:",
    "initial_questions": [
        "‡§â‡§§‡•ç‡§™‡§æ‡§¶ ‡§ï‡•á ‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§≤‡§æ‡§≠ ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à‡§Ç?",
        "‡§â‡§§‡•ç‡§™‡§æ‡§¶ ‡§ï‡§æ ‡§™‡•ç‡§∞‡§Ø‡•ã‡§ó ‡§ï‡•à‡§∏‡•á ‡§ï‡§∞‡•á‡§Ç?",
        "‡§â‡§§‡•ç‡§™‡§æ‡§¶ ‡§ï‡§ø‡§® ‡§´‡§∏‡§≤‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§â‡§™‡§Ø‡•Å‡§ï‡•ç‡§§ ‡§π‡•à?",
        "‡§Ö‡§®‡•Å‡§∂‡§Ç‡§∏‡§ø‡§§ ‡§Æ‡§æ‡§§‡•ç‡§∞‡§æ ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à?"
    ]
}

# Initialize session state
if 'chat_memory' not in st.session_state:
    st.session_state.chat_memory = ChatMemory()
if 'messages' not in st.session_state:
    st.session_state.messages = []
if 'message_counter' not in st.session_state:
    st.session_state.message_counter = 0
if 'submitted_question' not in st.session_state:
    st.session_state.submitted_question = None
if 'user_info' not in st.session_state:
    st.session_state.user_info = None
if 'show_suggestions' not in st.session_state:
    st.session_state.show_suggestions = False
    
# Configure the page
st.set_page_config(
    page_title="Product Assistant",
    page_icon="üå±",
    layout="wide"
)

# Custom CSS
st.markdown("""
<style>
.user-message {
    background-color: #72BF6A;
    color: black;
    padding: 15px;
    border-radius: 15px;
    margin: 10px 0;
}
.assistant-message {
    background-color: #000000;
    color: #98FB98;
    padding: 15px;
    border-radius: 15px;
    margin: 10px 0;
}
.stButton > button {
    background-color: #212B2A;
    color: white;
    border: none;
    padding: 10px 15px;
    border-radius: 5px;
    transition: background-color 0.3s;
}
.stButton > button:hover {
    background-color: #45a049;
}
.image-upload {
    margin: 20px 0;
    padding: 15px;
    border-radius: 10px;
    border: 2px dashed #72BF6A;
}
.product-card {
    border: 1px solid #ddd;
    border-radius: 10px;
    padding: 15px;
    margin: 10px;
    background-color: white;
    text-align: center;
}
.related-products {
    padding: 20px;
    margin: 20px 0;
    background-color: #f5f5f5;
    border-radius: 10px;
}
</style>
""", unsafe_allow_html=True)

def display_product_suggestions():
    if st.session_state.show_suggestions:
        # Add a separator in sidebar
        st.sidebar.markdown("---")
        
        # Display products title
        st.sidebar.markdown(f"### {UI_TEXT['suggestions_title']}")
        
        # Product 1
        with st.sidebar.container():
            st.image("paras-npk.webp", caption="PARAS NPK 12:32:16 50 Kg", use_column_width=True)
            st.markdown("**PARAS NPK 12:32:16 50 Kg**")
            st.markdown("---")
        
        # Product 2
        with st.sidebar.container():
            st.image("mosaic.webp", caption="MOSAIC MOP 50 Kg", use_column_width=True)
            st.markdown("**MOSAIC MOP 50 Kg**")
            st.markdown("---")
        
        # Product 3
        with st.sidebar.container():
            st.image("paras_dap.webp", caption="PARAS DAP 50 Kg", use_column_width=True)
            st.markdown("**PARAS DAP 50 Kg**")
                    
# Initialize components
@st.cache_resource
def initialize_components():
    config = ChatConfig()
    logger = ChatLogger(config.log_file)
    question_gen = QuestionGenerator(config.gemini_api_key)
    rag = GeminiRAG(config.gemini_api_key)
    db = ProductDatabase(config)
    user_manager = UserManager(config.user_data_file)
    return config, logger, question_gen, rag, db, user_manager

config, logger, question_gen, rag, db, user_manager = initialize_components()

# Load product database
@st.cache_resource
def load_database():
    with open("ENTOKILL.md", "r", encoding="utf-8") as f:
        markdown_content = f.read()
    db.process_markdown(markdown_content)

try:
    load_database()
except Exception as e:
    st.error(f"‡§°‡•á‡§ü‡§æ‡§¨‡•á‡§∏ ‡§≤‡•ã‡§° ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø: {str(e)}")

async def process_question(question: str, image: Optional[bytes] = None):
    try:
        relevant_docs = db.search(question)
        context = rag.create_context(relevant_docs)
        answer = await rag.get_answer(
            question, 
            context,
            st.session_state.user_info,
            image
        )
        
        follow_up_questions = await question_gen.generate_questions(
            question, 
            answer,
            st.session_state.user_info
        )
        
        st.session_state.chat_memory.add_interaction(question, answer)
        logger.log_interaction(
            question, 
            answer,
            st.session_state.user_info
        )
        
        st.session_state.message_counter += 1
        
        message_content = {
            "text": question,
            "has_image": image is not None
        }
        
        st.session_state.messages.append({
            "role": "user",
            "content": message_content,
            "message_id": st.session_state.message_counter
        })
        st.session_state.messages.append({
            "role": "assistant",
            "content": answer,
            "questions": follow_up_questions,
            "message_id": st.session_state.message_counter
        })
    except Exception as e:
        st.error(f"‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§™‡•ç‡§∞‡•ã‡§∏‡•á‡§∏ ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø: {str(e)}")

def handle_submit():
    if st.session_state.user_input:
        st.session_state.submitted_question = st.session_state.user_input
        st.session_state.user_input = ""

def render_user_form():
    """Render the user information form in the sidebar"""
    st.sidebar.title(UI_TEXT["sidebar_title"])
    
    with st.sidebar.form("user_info_form"):
        name = st.text_input(UI_TEXT["form_name"])
        mobile = st.text_input(UI_TEXT["form_mobile"])
        location = st.text_input(UI_TEXT["form_location"])
        has_purchased = st.checkbox(UI_TEXT["form_purchase"])
        crop_type = st.text_input(UI_TEXT["form_crop"])
        
        submitted = st.form_submit_button(UI_TEXT["form_submit"])
        
        if submitted:
            if name and mobile and location and crop_type:
                user_info = UserInfo(
                    name=name,
                    mobile=mobile,
                    location=location,
                    has_purchased=has_purchased,
                    crop_type=crop_type
                )
                
                if user_manager.save_user_info(user_info):
                    st.session_state.user_info = user_info
                    st.sidebar.success(UI_TEXT["form_success"])
                else:
                    st.sidebar.error(UI_TEXT["form_error"])
            else:
                st.sidebar.warning(UI_TEXT["form_required"])

def main():
    # Add suggestions toggle at the top of sidebar
    st.sidebar.checkbox(
        UI_TEXT["show_suggestions"],
        key="show_suggestions",
        value=st.session_state.show_suggestions
    )

    # Render user form in sidebar
    render_user_form()
    
    # Display product suggestions in sidebar if enabled
    if st.session_state.show_suggestions:
        display_product_suggestions()

    st.title(UI_TEXT["title"])
    
    # Welcome message
    if not st.session_state.messages:
        st.markdown(UI_TEXT["welcome_message"])
        
        # Display initial questions as buttons
        cols = st.columns(2)
        for i, question in enumerate(UI_TEXT["initial_questions"]):
            if cols[i % 2].button(question, key=f"initial_{i}", use_container_width=True):
                asyncio.run(process_question(question))
    
    # Display chat history
    for message in st.session_state.messages:
        if message["role"] == "user":
            if isinstance(message["content"], dict):
                st.markdown(
                    f'<div class="user-message">üë§ {message["content"]["text"]}</div>',
                    unsafe_allow_html=True
                )
                if message["content"]["has_image"]:
                    st.markdown(
                        '<div class="user-message">üì∑ ‡§õ‡§µ‡§ø ‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡•Ä ‡§ó‡§à</div>',
                        unsafe_allow_html=True
                    )
            else:
                st.markdown(
                    f'<div class="user-message">üë§ {message["content"]}</div>',
                    unsafe_allow_html=True
                )
        else:
            st.markdown(
                f'<div class="assistant-message">üå± {message["content"]}</div>',
                unsafe_allow_html=True
            )
            
            if message.get("questions"):
                cols = st.columns(2)
                for i, question in enumerate(message["questions"]):
                    if cols[i % 2].button(
                        question,
                        key=f"followup_{message['message_id']}_{i}",
                        use_container_width=True
                    ):
                        asyncio.run(process_question(question))
    
    # Input area with image upload
    with st.container():
        # Add image upload
        with st.expander(UI_TEXT["image_upload"], expanded=False):
            uploaded_file = st.file_uploader(
                "‡§Ö‡§™‡§®‡•Ä ‡§õ‡§µ‡§ø ‡§Ø‡§π‡§æ‡§Å ‡§°‡§æ‡§≤‡•á‡§Ç",
                type=['png', 'jpg', 'jpeg'],
                help=UI_TEXT["image_helper"],
                key="image_upload"
            )
            
            if uploaded_file:
                st.image(uploaded_file, caption="‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡•Ä ‡§ó‡§à ‡§õ‡§µ‡§ø", use_column_width=True)
        
        # Text input
        st.text_input(
            UI_TEXT["input_label"],
            key="user_input",
            placeholder=UI_TEXT["input_placeholder"],
            on_change=handle_submit
        )
        
        # Process submitted question
        if st.session_state.submitted_question:
            image_bytes = None
            if uploaded_file is not None:
                image_bytes = uploaded_file.getvalue()
            
            with st.spinner(UI_TEXT["image_processing"] if image_bytes else ""):
                asyncio.run(process_question(
                    st.session_state.submitted_question,
                    image_bytes
                ))
            
            st.session_state.submitted_question = None
            st.rerun()
        
        # Chat controls
        cols = st.columns([4, 1])
        
        # Clear chat button
        if cols[1].button(UI_TEXT["clear_chat"], use_container_width=True):
            st.session_state.messages = []
            st.session_state.chat_memory.clear_history()
            st.session_state.message_counter = 0
            st.rerun()

def handle_error(error: Exception):
    """Handle errors gracefully"""
    error_messages = {
        "generic": "‡§è‡§ï ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø ‡§π‡•Å‡§à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§™‡•Å‡§®‡§É ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç‡•§",
        "image": "‡§õ‡§µ‡§ø ‡§™‡•ç‡§∞‡•ã‡§∏‡•á‡§∏‡§ø‡§Ç‡§ó ‡§Æ‡•á‡§Ç ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§ï‡•ã‡§à ‡§Ö‡§®‡•ç‡§Ø ‡§õ‡§µ‡§ø ‡§Ü‡§ú‡§º‡§Æ‡§æ‡§è‡§Ç ‡§Ø‡§æ ‡§¨‡§ø‡§®‡§æ ‡§õ‡§µ‡§ø ‡§ï‡•á ‡§™‡•Ç‡§õ‡•á‡§Ç‡•§",
        "network": "‡§®‡•á‡§ü‡§µ‡§∞‡•ç‡§ï ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§™‡§®‡§æ ‡§ï‡§®‡•á‡§ï‡•ç‡§∂‡§® ‡§ú‡§æ‡§Ç‡§ö‡•á‡§Ç ‡§î‡§∞ ‡§™‡•Å‡§®‡§É ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç‡•§"
    }
    
    if "image" in str(error).lower():
        error_message = error_messages["image"]
    elif "network" in str(error).lower():
        error_message = error_messages["network"]
    else:
        error_message = error_messages["generic"]
    
    st.error(error_message)
    logging.error(f"Error in app: {str(error)}")

if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        handle_error(e)
